(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){module.exports=function(strings){if(typeof strings==="string")strings=[strings];var exprs=[].slice.call(arguments,1);var parts=[];for(var i=0;i<strings.length-1;i++){parts.push(strings[i],exprs[i]||"")}parts.push(strings[i]);return parts.join("")}},{}],2:[function(require,module,exports){THREE.OrbitControls=function(object,domElement){this.object=object;this.domElement=domElement!==undefined?domElement:document;this.enabled=true;this.target=new THREE.Vector3;this.minDistance=0;this.maxDistance=Infinity;this.minZoom=0;this.maxZoom=Infinity;this.minPolarAngle=0;this.maxPolarAngle=Math.PI;this.minAzimuthAngle=-Infinity;this.maxAzimuthAngle=Infinity;this.enableDamping=true;this.dampingFactor=.05;this.enableZoom=true;this.zoomSpeed=1;this.enableRotate=true;this.rotateSpeed=.02;this.enablePan=true;this.panSpeed=1;this.screenSpacePanning=false;this.keyPanSpeed=7;this.autoRotate=false;this.autoRotateSpeed=2;this.enableKeys=true;this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40};this.mouseButtons={LEFT:THREE.MOUSE.LEFT,MIDDLE:THREE.MOUSE.MIDDLE,RIGHT:THREE.MOUSE.RIGHT};this.target0=this.target.clone();this.position0=this.object.position.clone();this.zoom0=this.object.zoom;this.getPolarAngle=function(){return spherical.phi};this.getAzimuthalAngle=function(){return spherical.theta};this.saveState=function(){scope.target0.copy(scope.target);scope.position0.copy(scope.object.position);scope.zoom0=scope.object.zoom};this.reset=function(){scope.target.copy(scope.target0);scope.object.position.copy(scope.position0);scope.object.zoom=scope.zoom0;scope.object.updateProjectionMatrix();scope.dispatchEvent(changeEvent);scope.update();state=STATE.NONE};this.update=function(){var offset=new THREE.Vector3;var quat=(new THREE.Quaternion).setFromUnitVectors(object.up,new THREE.Vector3(0,1,0));var quatInverse=quat.clone().inverse();var lastPosition=new THREE.Vector3;var lastQuaternion=new THREE.Quaternion;return function update(){var position=scope.object.position;offset.copy(position).sub(scope.target);offset.applyQuaternion(quat);spherical.setFromVector3(offset);if(scope.autoRotate&&state===STATE.NONE){rotateLeft(getAutoRotationAngle())}spherical.theta+=sphericalDelta.theta;spherical.phi+=sphericalDelta.phi;spherical.theta=Math.max(scope.minAzimuthAngle,Math.min(scope.maxAzimuthAngle,spherical.theta));spherical.phi=Math.max(scope.minPolarAngle,Math.min(scope.maxPolarAngle,spherical.phi));spherical.makeSafe();spherical.radius*=scale;spherical.radius=Math.max(scope.minDistance,Math.min(scope.maxDistance,spherical.radius));scope.target.add(panOffset);offset.setFromSpherical(spherical);offset.applyQuaternion(quatInverse);position.copy(scope.target).add(offset);scope.object.lookAt(scope.target);if(scope.enableDamping===true){sphericalDelta.theta*=1-scope.dampingFactor;sphericalDelta.phi*=1-scope.dampingFactor;panOffset.multiplyScalar(1-scope.dampingFactor)}else{sphericalDelta.set(0,0,0);panOffset.set(0,0,0)}scale=1;if(zoomChanged||lastPosition.distanceToSquared(scope.object.position)>EPS||8*(1-lastQuaternion.dot(scope.object.quaternion))>EPS){scope.dispatchEvent(changeEvent);lastPosition.copy(scope.object.position);lastQuaternion.copy(scope.object.quaternion);zoomChanged=false;return true}return false}}();this.dispose=function(){scope.domElement.removeEventListener("contextmenu",onContextMenu,false);scope.domElement.removeEventListener("mousedown",onMouseDown,false);scope.domElement.removeEventListener("wheel",onMouseWheel,false);scope.domElement.removeEventListener("touchstart",onTouchStart,false);scope.domElement.removeEventListener("touchend",onTouchEnd,false);scope.domElement.removeEventListener("touchmove",onTouchMove,false);document.removeEventListener("mousemove",onMouseMove,false);document.removeEventListener("mouseup",onMouseUp,false);window.removeEventListener("keydown",onKeyDown,false)};var scope=this;var changeEvent={type:"change"};var startEvent={type:"start"};var endEvent={type:"end"};var STATE={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY_PAN:4};var state=STATE.NONE;var EPS=1e-6;var spherical=new THREE.Spherical;var sphericalDelta=new THREE.Spherical;var scale=1;var panOffset=new THREE.Vector3;var zoomChanged=false;var rotateStart=new THREE.Vector2;var rotateEnd=new THREE.Vector2;var rotateDelta=new THREE.Vector2;var panStart=new THREE.Vector2;var panEnd=new THREE.Vector2;var panDelta=new THREE.Vector2;var dollyStart=new THREE.Vector2;var dollyEnd=new THREE.Vector2;var dollyDelta=new THREE.Vector2;function getAutoRotationAngle(){return 2*Math.PI/60/60*scope.autoRotateSpeed}function getZoomScale(){return Math.pow(.95,scope.zoomSpeed)}function rotateLeft(angle){sphericalDelta.theta-=angle}function rotateUp(angle){sphericalDelta.phi-=angle}var panLeft=function(){var v=new THREE.Vector3;return function panLeft(distance,objectMatrix){v.setFromMatrixColumn(objectMatrix,0);v.multiplyScalar(-distance);panOffset.add(v)}}();var panUp=function(){var v=new THREE.Vector3;return function panUp(distance,objectMatrix){if(scope.screenSpacePanning===true){v.setFromMatrixColumn(objectMatrix,1)}else{v.setFromMatrixColumn(objectMatrix,0);v.crossVectors(scope.object.up,v)}v.multiplyScalar(distance);panOffset.add(v)}}();var pan=function(){var offset=new THREE.Vector3;return function pan(deltaX,deltaY){var element=scope.domElement===document?scope.domElement.body:scope.domElement;if(scope.object.isPerspectiveCamera){var position=scope.object.position;offset.copy(position).sub(scope.target);var targetDistance=offset.length();targetDistance*=Math.tan(scope.object.fov/2*Math.PI/180);panLeft(2*deltaX*targetDistance/element.clientHeight,scope.object.matrix);panUp(2*deltaY*targetDistance/element.clientHeight,scope.object.matrix)}else if(scope.object.isOrthographicCamera){panLeft(deltaX*(scope.object.right-scope.object.left)/scope.object.zoom/element.clientWidth,scope.object.matrix);panUp(deltaY*(scope.object.top-scope.object.bottom)/scope.object.zoom/element.clientHeight,scope.object.matrix)}else{console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");scope.enablePan=false}}}();function dollyIn(dollyScale){if(scope.object.isPerspectiveCamera){scale/=dollyScale}else if(scope.object.isOrthographicCamera){scope.object.zoom=Math.max(scope.minZoom,Math.min(scope.maxZoom,scope.object.zoom*dollyScale));scope.object.updateProjectionMatrix();zoomChanged=true}else{console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");scope.enableZoom=false}}function dollyOut(dollyScale){if(scope.object.isPerspectiveCamera){scale*=dollyScale}else if(scope.object.isOrthographicCamera){scope.object.zoom=Math.max(scope.minZoom,Math.min(scope.maxZoom,scope.object.zoom/dollyScale));scope.object.updateProjectionMatrix();zoomChanged=true}else{console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");scope.enableZoom=false}}function handleMouseDownRotate(event){rotateStart.set(event.clientX,event.clientY)}function handleMouseDownDolly(event){dollyStart.set(event.clientX,event.clientY)}function handleMouseDownPan(event){panStart.set(event.clientX,event.clientY)}function handleMouseMoveRotate(event){rotateEnd.set(event.clientX,event.clientY);rotateDelta.subVectors(rotateEnd,rotateStart).multiplyScalar(scope.rotateSpeed);var element=scope.domElement===document?scope.domElement.body:scope.domElement;rotateLeft(2*Math.PI*rotateDelta.x/element.clientHeight);rotateUp(2*Math.PI*rotateDelta.y/element.clientHeight);rotateStart.copy(rotateEnd);scope.update()}function handleMouseMoveDolly(event){dollyEnd.set(event.clientX,event.clientY);dollyDelta.subVectors(dollyEnd,dollyStart);if(dollyDelta.y>0){dollyIn(getZoomScale())}else if(dollyDelta.y<0){dollyOut(getZoomScale())}dollyStart.copy(dollyEnd);scope.update()}function handleMouseMovePan(event){panEnd.set(event.clientX,event.clientY);panDelta.subVectors(panEnd,panStart).multiplyScalar(scope.panSpeed);pan(panDelta.x,panDelta.y);panStart.copy(panEnd);scope.update()}function handleMouseUp(event){}function handleMouseWheel(event){if(event.deltaY<0){dollyOut(getZoomScale())}else if(event.deltaY>0){dollyIn(getZoomScale())}scope.update()}function handleKeyDown(event){switch(event.keyCode){case scope.keys.UP:pan(0,scope.keyPanSpeed);scope.update();break;case scope.keys.BOTTOM:pan(0,-scope.keyPanSpeed);scope.update();break;case scope.keys.LEFT:pan(scope.keyPanSpeed,0);scope.update();break;case scope.keys.RIGHT:pan(-scope.keyPanSpeed,0);scope.update();break}}function handleTouchStartRotate(event){rotateStart.set(event.touches[0].pageX,event.touches[0].pageY)}function handleTouchStartDollyPan(event){if(scope.enableZoom){var dx=event.touches[0].pageX-event.touches[1].pageX;var dy=event.touches[0].pageY-event.touches[1].pageY;var distance=Math.sqrt(dx*dx+dy*dy);dollyStart.set(0,distance)}if(scope.enablePan){var x=.5*(event.touches[0].pageX+event.touches[1].pageX);var y=.5*(event.touches[0].pageY+event.touches[1].pageY);panStart.set(x,y)}}function handleTouchMoveRotate(event){rotateEnd.set(event.touches[0].pageX,event.touches[0].pageY);rotateDelta.subVectors(rotateEnd,rotateStart).multiplyScalar(scope.rotateSpeed);var element=scope.domElement===document?scope.domElement.body:scope.domElement;rotateLeft(2*Math.PI*rotateDelta.x/element.clientHeight);rotateUp(2*Math.PI*rotateDelta.y/element.clientHeight);rotateStart.copy(rotateEnd);scope.update()}function handleTouchMoveDollyPan(event){if(scope.enableZoom){var dx=event.touches[0].pageX-event.touches[1].pageX;var dy=event.touches[0].pageY-event.touches[1].pageY;var distance=Math.sqrt(dx*dx+dy*dy);dollyEnd.set(0,distance);dollyDelta.set(0,Math.pow(dollyEnd.y/dollyStart.y,scope.zoomSpeed));dollyIn(dollyDelta.y);dollyStart.copy(dollyEnd)}if(scope.enablePan){var x=.5*(event.touches[0].pageX+event.touches[1].pageX);var y=.5*(event.touches[0].pageY+event.touches[1].pageY);panEnd.set(x,y);panDelta.subVectors(panEnd,panStart).multiplyScalar(scope.panSpeed);pan(panDelta.x,panDelta.y);panStart.copy(panEnd)}scope.update()}function handleTouchEnd(event){}function onMouseDown(event){if(scope.enabled===false)return;event.preventDefault();switch(event.button){case scope.mouseButtons.LEFT:if(event.ctrlKey||event.metaKey){if(scope.enablePan===false)return;handleMouseDownPan(event);state=STATE.PAN}else{if(scope.enableRotate===false)return;handleMouseDownRotate(event);state=STATE.ROTATE}break;case scope.mouseButtons.MIDDLE:if(scope.enableZoom===false)return;handleMouseDownDolly(event);state=STATE.DOLLY;break;case scope.mouseButtons.RIGHT:if(scope.enablePan===false)return;handleMouseDownPan(event);state=STATE.PAN;break}if(state!==STATE.NONE){document.addEventListener("mousemove",onMouseMove,false);document.addEventListener("mouseup",onMouseUp,false);scope.dispatchEvent(startEvent)}}function onMouseMove(event){if(scope.enabled===false)return;event.preventDefault();switch(state){case STATE.ROTATE:if(scope.enableRotate===false)return;handleMouseMoveRotate(event);break;case STATE.DOLLY:if(scope.enableZoom===false)return;handleMouseMoveDolly(event);break;case STATE.PAN:if(scope.enablePan===false)return;handleMouseMovePan(event);break}}function onMouseUp(event){if(scope.enabled===false)return;handleMouseUp(event);document.removeEventListener("mousemove",onMouseMove,false);document.removeEventListener("mouseup",onMouseUp,false);scope.dispatchEvent(endEvent);state=STATE.NONE}function onMouseWheel(event){if(scope.enabled===false||scope.enableZoom===false||state!==STATE.NONE&&state!==STATE.ROTATE)return;event.preventDefault();event.stopPropagation();scope.dispatchEvent(startEvent);handleMouseWheel(event);scope.dispatchEvent(endEvent)}function onKeyDown(event){if(scope.enabled===false||scope.enableKeys===false||scope.enablePan===false)return;handleKeyDown(event)}function onTouchStart(event){if(scope.enabled===false)return;event.preventDefault();switch(event.touches.length){case 1:if(scope.enableRotate===false)return;handleTouchStartRotate(event);state=STATE.TOUCH_ROTATE;break;case 2:if(scope.enableZoom===false&&scope.enablePan===false)return;handleTouchStartDollyPan(event);state=STATE.TOUCH_DOLLY_PAN;break;default:state=STATE.NONE}if(state!==STATE.NONE){scope.dispatchEvent(startEvent)}}function onTouchMove(event){if(scope.enabled===false)return;event.preventDefault();event.stopPropagation();switch(event.touches.length){case 1:if(scope.enableRotate===false)return;if(state!==STATE.TOUCH_ROTATE)return;handleTouchMoveRotate(event);break;case 2:if(scope.enableZoom===false&&scope.enablePan===false)return;if(state!==STATE.TOUCH_DOLLY_PAN)return;handleTouchMoveDollyPan(event);break;default:state=STATE.NONE}}function onTouchEnd(event){if(scope.enabled===false)return;handleTouchEnd(event);scope.dispatchEvent(endEvent);state=STATE.NONE}function onContextMenu(event){if(scope.enabled===false)return;event.preventDefault()}scope.domElement.addEventListener("contextmenu",onContextMenu,false);scope.domElement.addEventListener("mousedown",onMouseDown,false);scope.domElement.addEventListener("wheel",onMouseWheel,false);scope.domElement.addEventListener("touchstart",onTouchStart,false);scope.domElement.addEventListener("touchend",onTouchEnd,false);scope.domElement.addEventListener("touchmove",onTouchMove,false);window.addEventListener("keydown",onKeyDown,false);this.update()};THREE.OrbitControls.prototype=Object.create(THREE.EventDispatcher.prototype);THREE.OrbitControls.prototype.constructor=THREE.OrbitControls;Object.defineProperties(THREE.OrbitControls.prototype,{center:{get:function(){console.warn("THREE.OrbitControls: .center has been renamed to .target");return this.target}},noZoom:{get:function(){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.");return!this.enableZoom},set:function(value){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.");this.enableZoom=!value}},noRotate:{get:function(){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.");return!this.enableRotate},set:function(value){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.");this.enableRotate=!value}},noPan:{get:function(){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.");return!this.enablePan},set:function(value){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.");this.enablePan=!value}},noKeys:{get:function(){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.");return!this.enableKeys},set:function(value){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.");this.enableKeys=!value}},staticMoving:{get:function(){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.");return!this.enableDamping},set:function(value){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.");this.enableDamping=!value}},dynamicDampingFactor:{get:function(){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.");return this.dampingFactor},set:function(value){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.");this.dampingFactor=value}}})},{}],3:[function(require,module,exports){function replaceThreeChunkFn(a,b){return THREE.ShaderChunk[b]+"\n"}function shaderParse(glsl){return glsl.replace(/\/\/\s?chunk\(\s?(\w+)\s?\);/g,replaceThreeChunkFn)}module.exports=shaderParse},{}],4:[function(require,module,exports){var OrbitControls=require("./controls/OrbitControls.js");var postprocessing=require("./postprocessing/composer");var settings=require("./modules/settings.js");var fbo=require("./modules/fbo");var lights=require("./modules/lights");var floor=require("./modules/floor");var particles=require("./modules/particles");var dom=require("./modules/dom");exports.restart=restart;renderer=new THREE.WebGLRenderer({antialias:true});renderer.setSize(window.innerWidth,window.innerHeight);renderer.shadowMap.type=THREE.PCFSoftShadowMap;renderer.shadowMap.enabled=true;renderer.setPixelRatio(window.devicePixelRatio);document.body.appendChild(renderer.domElement);scene=new THREE.Scene;scene.fog=new THREE.FogExp2(988441,.0013);renderer.setClearColor(988441);camera=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,1,1e4);camera.position.z=-100;camera.position.y=110;camera.position.x=160;controls=new THREE.OrbitControls(camera,renderer.domElement);controls.enablePan=false;controls.maxDistance=250;controls.minDistance=150;controls.minPolarAngle=.8;controls.maxPolarAngle=Math.PI*2/5;controls.target.y=0;controls.update();postprocessing.init(renderer,scene,camera,window.innerWidth,window.innerHeight);dom.init();fbo.init(renderer);lights.init();floor.init();particles.init();scene.add(lights.mesh);scene.add(floor.mesh);scene.add(particles.mesh);function restart(){scene.remove(particles.mesh);fbo.init(renderer);particles.init();scene.add(particles.mesh)}function update(){requestAnimationFrame(update);dom.update();controls.update();fbo.update();particles.update();postprocessing.render()}window.onresize=function(){w=window.innerWidth;h=window.innerHeight;camera.aspect=w/h;camera.updateProjectionMatrix();renderer.setSize(w,h);postprocessing.setSize(w,h)};requestAnimationFrame(update)},{"./controls/OrbitControls.js":2,"./modules/dom":5,"./modules/fbo":6,"./modules/floor":7,"./modules/lights":8,"./modules/particles":10,"./modules/settings.js":11,"./postprocessing/composer":12}],5:[function(require,module,exports){var settings=require("./settings");var undef;var overlay=undef;var brand=undef;var inside=undef;var mbCheckbox=undef;var menu=undef;var qualities=undef;var settings_items=undef;var notice=undef;var radSlider=undef;var visSlider=undef;var elaSlider=undef;var color1=undef;var color2=undef;var fluid_ball=undef;var ball=0;var direction=1;var amount=1;exports.init=init;exports.update=update;function init(){notice=document.getElementById("noticeText");qualities=document.getElementsByClassName("qualities");settings_items=document.getElementsByClassName("settings_items");menu=document.getElementById("settings_menu");mbCheckbox=document.getElementById("mb_value");color1=document.getElementById("color1_slider");color2=document.getElementById("color2_slider");elaSlider=document.getElementById("ela_slider");visSlider=document.getElementById("vis_slider");radSlider=document.getElementById("rad_slider");inside=document.getElementById("ball_sphere_inside");brand=document.getElementById("brand");overlay=document.getElementById("overlay");overlay.classList.add("invisible");brand.classList.remove("brandInit");fluid_ball=document.getElementById("fluid_ball");inside.style.transform="scale("+settings.radius/50;+")";radSlider.addEventListener("mousemove",function(e){settings.radius=this.value;inside=document.getElementById("ball_sphere_inside");inside.style.transform="scale("+settings.radius/50;+")";radValue=document.getElementById("rad_value");radValue.innerHTML=this.value;radValue=document.getElementById("rad_title_value");radValue.innerHTML=this.value},false);visSlider.addEventListener("mousemove",function(e){settings.viscosity=this.value/100;visValue=document.getElementById("vis_value");visValue.innerHTML=this.value;visValue=document.getElementById("vis_title_value");visValue.innerHTML=this.value;fluid_box=document.getElementById("fluid_box");fluid_box.style.background="rgba(78, 177, "+(219-140*settings.viscosity/.3)+","+(.2+.2*settings.viscosity/.3)+")";fluid_box.style.border="2px solid rgba(78, 177, "+(219-140*settings.viscosity/.3)+", 1)"},false);elaSlider.addEventListener("mousemove",function(e){settings.elasticity=this.value/1e3;elaValue=document.getElementById("ela_value");elaValue.innerHTML=this.value;elaValue=document.getElementById("ela_title_value");elaValue.innerHTML=this.value},false);color1.addEventListener("mousemove",function(e){col=new THREE.Color("hsl("+this.value+",  73%, 46%)");settings.color1="#"+col.getHexString();col1=document.getElementById("color1_value");col1.style.background="#"+col.getHexString();col1=document.getElementById("color1_box");col1.style.background="#"+col.getHexString()},false);color2.addEventListener("mousemove",function(e){col=new THREE.Color("hsl("+this.value+",  73%, 46%)");settings.color2="#"+col.getHexString();col2=document.getElementById("color2_value");col2.style.background="#"+col.getHexString();col2=document.getElementById("color2_box");col2.style.background="#"+col.getHexString()},false);mbCheckbox.addEventListener("click",function(e){settings.motionBlur=!settings.motionBlur;mbValue=document.getElementById("motion_blur_title_value");this.classList.toggle("disabled");mbValue.classList.toggle("disabled");if(settings.motionBlur){this.innerHTML="Enabled";mbValue.innerHTML="Enabled"}else{this.innerHTML="Disabled";mbValue.innerHTML="Disabled"}},false);menu.addEventListener("click",function(e){this.classList.toggle("menu_active");set=document.getElementById("settings");set.classList.toggle("final_settings")},false);for(var i=0;i<settings_items.length;i++){settings_items[i].addEventListener("click",function(e){for(var i=0;i<settings_items.length;i++){settings_items[i].classList.remove("selected_item")}this.classList.add("selected_item")},false)}for(var i=0;i<qualities.length;i++){qualities[i].addEventListener("click",function(e){e.preventDefault();if(this.dataset.quality==settings.quality)return;for(var i=0;i<qualities.length;i++){qualities[i].classList.remove("selected");qualities[i].classList.remove("recommended")}this.classList.add("selected");changeQuality(this.dataset.quality)},false);qualities[i].addEventListener("transitionend",function(){var node=this;setTimeout(function(){node.classList.remove("recommended")},800)},false)}}function changeQuality(val){settings.changeQuality(val)}function update(){if(ball>130||ball<0)direction*=-1;if(ball>35&&ball<95){amount=1-.6*settings.viscosity/.3}else{amount=1.5}ball+=direction*amount;fluid_ball.style.transform="translateX("+ball+"px) translateY(-20px)"}},{"./settings":11}],6:[function(require,module,exports){var glslify=require("glslify");var mouse=require("./mouse");var settings=require("./settings");var shaderParse=require("../helpers/shaderParse");var undef;var _mesh;var _scene;var _camera;var _renderer;var _copyShader;var _positionShader;var _velocityShader;var _rtt;var _rtt2;var _vtt;var _vtt2;var TEXTURE_WIDTH;var TEXTURE_HEIGHT;var AMOUNT;var randomData;var cur=Date.now();var prev=cur;var dim=exports.dim=220;exports.life=0;exports.init=init;exports.update=update;exports.defaultPosition;function init(renderer){TEXTURE_WIDTH=settings.TEXTURE_WIDTH;TEXTURE_HEIGHT=settings.TEXTURE_HEIGHT;AMOUNT=TEXTURE_WIDTH*TEXTURE_HEIGHT;_renderer=renderer;_scene=new THREE.Scene;_camera=new THREE.Camera;_camera.position.z=1;exports.randomTexture=_createRandomTexture();exports.defaultPosition=_createDefaultPositionTexture();_copyShader=new THREE.RawShaderMaterial({uniforms:{resolution:{type:"v2",value:new THREE.Vector2(TEXTURE_WIDTH,TEXTURE_HEIGHT)},texture:{type:"t",value:undef}},vertexShader:shaderParse(glslify(["precision highp float;\n#define GLSLIFY 1\n\nattribute vec3 position;\n\nvoid main() {\n    gl_Position = vec4( position, 1.0 );\n}"])),fragmentShader:shaderParse(glslify(["precision highp float;\n#define GLSLIFY 1\n\nuniform vec2 resolution;\nuniform sampler2D texture;\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\n    gl_FragColor = texture2D( texture, uv );\n}"]))});_positionShader=new THREE.RawShaderMaterial({uniforms:{resolution:{type:"v2",value:new THREE.Vector2(TEXTURE_WIDTH,TEXTURE_HEIGHT)},texturePosition:{type:"t",value:undef},textureVelocity:{type:"t",value:undef}},vertexShader:shaderParse(glslify(["precision highp float;\n#define GLSLIFY 1\n\nattribute vec3 position;\n\nvoid main() {\n    gl_Position = vec4( position, 1.0 );\n}"])),fragmentShader:shaderParse(glslify(["precision highp float;\n#define GLSLIFY 1\n\nuniform vec2 resolution;\nuniform sampler2D texturePosition;\nuniform sampler2D textureVelocity;\n\n#define PI 3.1415926535897932384626433832795\nvoid main() {\n\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\n\n    vec3 pos = texture2D( texturePosition, uv ).xyz;\n    vec3 vel = texture2D( textureVelocity, uv ).xyz;\n\n    pos += vel;\n\n    gl_FragColor = vec4( pos, 1.0 );\n}"])),blending:THREE.NoBlending,transparent:false,depthWrite:false,depthTest:false});_velocityShader=new THREE.RawShaderMaterial({uniforms:{resolution:{type:"v2",value:new THREE.Vector2(TEXTURE_WIDTH,TEXTURE_HEIGHT)},textureRandom:{type:"t",value:exports.randomTexture.texture},texturePosition:{type:"t",value:undef},textureVelocity:{type:"t",value:undef},mousePosition:{type:"v3",value:new THREE.Vector3(0,0,0)},mousePrev:{type:"v3",value:new THREE.Vector3(0,0,0)},mouseVelocity:{type:"v3",value:new THREE.Vector3(0,0,0)},mouseRadius:{type:"f",value:settings.radius},viscosity:{type:"f",value:settings.viscosity},elasticity:{type:"f",value:settings.elasticity},defaultPosition:{type:"t",value:exports.defaultPosition.texture},dim:{type:"f",value:dim},time:{type:"f",value:0}},vertexShader:shaderParse(glslify(["precision highp float;\n#define GLSLIFY 1\n\nattribute vec3 position;\n\nvoid main() {\n    gl_Position = vec4( position, 1.0 );\n}"])),fragmentShader:shaderParse(glslify(["precision highp float;\n#define GLSLIFY 1\n\nuniform vec2 resolution;\nuniform sampler2D textureRandom;\nuniform sampler2D texturePosition;\nuniform sampler2D textureVelocity;\nuniform sampler2D defaultPosition;\nuniform vec3 mousePosition;\nuniform vec3 mousePrev;\nuniform vec3 mouseVelocity;\nuniform float mouseRadius;\nuniform float viscosity;\nuniform float elasticity;\nuniform float dim;\nuniform float time;\n\n#define PI 3.1415926535897932384626433832795\n\nvec2 distToSegment( vec3 x1, vec3 x2, vec3 x0 ) {\n    vec3 v = x2 - x1;\n    vec3 w = x0 - x1;\n\n    float c1 = dot(w,v);\n    float c2 = dot(v,v);\n\n    if ( c1 <= 0.0 ) {\n        return vec2( distance( x0, x1 ), 0.0 );\n    }\n    if ( c2 <= c1) {\n        return vec2( distance( x0, x2), 1.0 );\n    }\n\n    float b = c1 / c2;\n    vec3 pb = x1 + b*v;\n    return vec2( distance( x0, pb ), b );\n}\n\nvoid main() {\n\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\n\n    vec3 rand = texture2D( textureRandom, uv ).xyz;\n    vec3 cur = texture2D( texturePosition, uv ).xyz;\n    vec3 pos = texture2D( defaultPosition, uv ).xyz;\n    vec3 vel = texture2D( textureVelocity, uv ).xyz;\n\n    float x = ( dim/2.0 + pos.x ) / dim;\n    float z = ( dim/2.0 + pos.z ) / dim;\n\n    pos.x += rand.x*1.0;\n    pos.y += sin(x*PI + PI*2.0*5.0*z + PI*time)*3.0 + rand.y*3.5;\n    pos.z += sin(x*PI*1.5 + PI*time)*5.0 + rand.z*1.0;\n\n    vec3 offset = (pos - cur);\n    vec2 dist = distToSegment(mousePrev, mousePosition, cur) / mouseRadius;\n\n    if ( dist.x <= 1.0 ) {\n        vel += offset*elasticity*1.0 - vel * viscosity;\n        vel += (normalize(cur - (mousePrev + (mousePosition - mousePrev) * dist.y ) ) * mix(7.0, 0.1, dist.x ) + rand * 0.02 );\n    }\n    else {\n        vel += offset*elasticity - vel * viscosity;\n    }\n\n    gl_FragColor = vec4( vel, 1.0 );\n}"])),blending:THREE.NoBlending,transparent:false,depthWrite:false,depthTest:false});_mesh=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),_copyShader);_scene.add(_mesh);_vtt=new THREE.WebGLRenderTarget(TEXTURE_WIDTH,TEXTURE_HEIGHT,{wrapS:THREE.ClampToEdgeWrapping,wrapT:THREE.ClampToEdgeWrapping,minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:THREE.FloatType,depthBuffer:false,stencilBuffer:false});_vtt2=_vtt.clone();_copyTexture(_createVelocityTexture(),_vtt);_copyTexture(_vtt,_vtt2);_rtt=new THREE.WebGLRenderTarget(TEXTURE_WIDTH,TEXTURE_HEIGHT,{wrapS:THREE.ClampToEdgeWrapping,wrapT:THREE.ClampToEdgeWrapping,minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:THREE.FloatType,depthWrite:false,depthBuffer:false,stencilBuffer:false});_rtt2=_rtt.clone();_copyTexture(_createPositionTexture(),_rtt);_copyTexture(_rtt,_rtt2)}function _copyTexture(input,output){_mesh.material=_copyShader;_copyShader.uniforms.texture.value=input.texture;_renderer.render(_scene,_camera,output)}function _updatePosition(){var tmp=_rtt;_rtt=_rtt2;_rtt2=tmp;_mesh.material=_positionShader;_positionShader.uniforms.textureVelocity.value=_vtt.texture;_positionShader.uniforms.texturePosition.value=_rtt2.texture;_renderer.render(_scene,_camera,_rtt)}function _updateVelocity(){var tmp=_vtt;_vtt=_vtt2;_vtt2=tmp;_mesh.material=_velocityShader;_velocityShader.uniforms.mouseRadius.value=settings.radius;_velocityShader.uniforms.viscosity.value=settings.viscosity;_velocityShader.uniforms.elasticity.value=settings.elasticity;_velocityShader.uniforms.textureVelocity.value=_vtt2.texture;_velocityShader.uniforms.texturePosition.value=_rtt.texture;_velocityShader.uniforms.mousePosition.value.copy(mouse.position);_velocityShader.uniforms.mousePrev.value.copy(mouse.prev);_velocityShader.uniforms.mouseVelocity.value.copy(mouse.speed);_velocityShader.uniforms.time.value=exports.life;_renderer.render(_scene,_camera,_vtt)}function _createRandomTexture(){randomData=new Float32Array(AMOUNT*4);for(var x=0;x<TEXTURE_WIDTH;x++){for(var z=0;z<TEXTURE_HEIGHT;z++){randomData[x*TEXTURE_HEIGHT*4+z*4]=THREE.Math.randFloat(-1,1);randomData[x*TEXTURE_HEIGHT*4+z*4+1]=THREE.Math.randFloat(-1,1);randomData[x*TEXTURE_HEIGHT*4+z*4+2]=THREE.Math.randFloat(-1,1)}}tmp={};tmp.texture=new THREE.DataTexture(randomData,TEXTURE_WIDTH,TEXTURE_HEIGHT,THREE.RGBAFormat,THREE.FloatType);tmp.texture.minFilter=THREE.NearestFilter;tmp.texture.magFilter=THREE.NearestFilter;tmp.texture.needsUpdate=true;tmp.texture.generateMipmaps=false;tmp.texture.flipY=false;return tmp}function _createPositionTexture(){var data=new Float32Array(AMOUNT*4);for(var x=0;x<TEXTURE_WIDTH;x++){for(var z=0;z<TEXTURE_HEIGHT;z++){xNorm=x/TEXTURE_WIDTH;zNorm=z/TEXTURE_HEIGHT;time=exports.life;data[x*TEXTURE_HEIGHT*4+z*4]=-dim/2+dim*(x/TEXTURE_WIDTH)+randomData[x*TEXTURE_HEIGHT*4+z*4];data[x*TEXTURE_HEIGHT*4+z*4+1]=Math.sin(xNorm*Math.PI+Math.PI*2*5*zNorm+Math.PI*time)*3+randomData[x*TEXTURE_HEIGHT*4+z*4+1]*3.5;data[x*TEXTURE_HEIGHT*4+z*4+2]=-dim/2+dim*(z/TEXTURE_HEIGHT)+Math.sin(xNorm*Math.PI*1.5+Math.PI*time)*5+randomData[x*TEXTURE_HEIGHT*4+z*4+2]}}tmp={};tmp.texture=new THREE.DataTexture(data,TEXTURE_WIDTH,TEXTURE_HEIGHT,THREE.RGBAFormat,THREE.FloatType);tmp.texture.minFilter=THREE.NearestFilter;tmp.texture.magFilter=THREE.NearestFilter;tmp.texture.needsUpdate=true;tmp.texture.generateMipmaps=false;tmp.texture.flipY=false;return tmp}function _createDefaultPositionTexture(){var data=new Float32Array(AMOUNT*4);for(var x=0;x<TEXTURE_WIDTH;x++){for(var z=0;z<TEXTURE_HEIGHT;z++){data[x*TEXTURE_HEIGHT*4+z*4]=-dim/2+dim*(x/TEXTURE_WIDTH);data[x*TEXTURE_HEIGHT*4+z*4+1]=0;data[x*TEXTURE_HEIGHT*4+z*4+2]=-dim/2+dim*(z/TEXTURE_HEIGHT)}}tmp={};tmp.texture=new THREE.DataTexture(data,TEXTURE_WIDTH,TEXTURE_HEIGHT,THREE.RGBAFormat,THREE.FloatType);tmp.texture.minFilter=THREE.NearestFilter;tmp.texture.magFilter=THREE.NearestFilter;tmp.texture.needsUpdate=true;tmp.texture.generateMipmaps=false;tmp.texture.flipY=false;return tmp}function _createVelocityTexture(){tmp={};tmp.texture=new THREE.DataTexture(new Float32Array(AMOUNT*4),TEXTURE_WIDTH,TEXTURE_HEIGHT,THREE.RGBAFormat,THREE.FloatType);tmp.texture.minFilter=THREE.NearestFilter;tmp.texture.magFilter=THREE.NearestFilter;tmp.texture.needsUpdate=true;tmp.texture.generateMipmaps=false;tmp.texture.flipY=false;return tmp}function update(){cur=Date.now();var offset=cur-prev;prev=cur;exports.life+=Math.min(offset/1200,1/8);exports.life%=2;mouse.update(offset/1e3);_updateVelocity();_updatePosition();exports.rtt=_rtt}},{"../helpers/shaderParse":3,"./mouse":9,"./settings":11,glslify:1}],7:[function(require,module,exports){var undef;exports.mesh=undef;exports.init=init;function init(){var geometry=new THREE.PlaneGeometry(4e3,4e3,10,10);var material=new THREE.MeshStandardMaterial({roughness:.7,metalness:1,dithering:true,color:2438732,emissive:0});var floor=exports.mesh=new THREE.Mesh(geometry,material);floor.rotation.x=-1.57;floor.position.y=-55;floor.receiveShadow=true;var geo=new THREE.PlaneGeometry(15,15,10,10);var mat=new THREE.MeshStandardMaterial({roughness:.7,metalness:1,color:16777215,emissive:0,side:THREE.DoubleSide});var plane=new THREE.Mesh(geo,mat);plane.rotateOnAxis(new THREE.Vector3(1,0,0),-Math.PI/2);plane.castShadow=true;plane.receiveShadow=true}},{}],8:[function(require,module,exports){var undef;mesh=exports.mesh=undef;exports.init=init;function init(){mesh=exports.mesh=new THREE.Object3D;mesh.position.set(0,190,0);var ambient=new THREE.AmbientLight(3355443);mesh.add(ambient);var directionalLight=new THREE.DirectionalLight(12225419,.5);directionalLight.position.set(1,1,1);mesh.add(directionalLight);var directionalLight2=new THREE.DirectionalLight(9157300,.3);directionalLight2.position.set(1,1,-1);mesh.add(directionalLight2);var pointLight=new THREE.PointLight(10066329,1,1600);pointLight.castShadow=true;pointLight.shadow.camera.near=10;pointLight.shadow.camera.far=1500;pointLight.shadow.bias=.04;pointLight.shadow.mapSize.width=2048;pointLight.shadow.mapSize.height=1024;mesh.add(pointLight)}},{}],9:[function(require,module,exports){var undef;exports.update=update;mouse=new THREE.Vector2(1,1);prevmouse=new THREE.Vector3(999,0,0);tmpmouse=new THREE.Vector3;mouse3d=new THREE.Vector3(999,0,0);mousespeed=new THREE.Vector3;raycaster=new THREE.Raycaster;plane3d=new THREE.Plane(new THREE.Vector3(0,1,0));exports.position=mouse3d;exports.prev=prevmouse;exports.speed=mousespeed;function update(dt){prevmouse.copy(mouse3d);raycaster.setFromCamera(mouse,camera);raycaster.ray.intersectPlane(plane3d,tmpmouse);if(tmpmouse!=null){mouse3d.copy(tmpmouse)}mousespeed.copy(mouse3d.clone().sub(prevmouse));mousespeed.y=0}window.onmousemove=function(evt){mouse.x=evt.pageX/window.innerWidth*2-1;mouse.y=-(evt.pageY/window.innerHeight)*2+1}},{}],10:[function(require,module,exports){var glslify=require("glslify");var settings=require("./settings");var lights=require("./lights");var fbo=require("./fbo");var shaderParse=require("../helpers/shaderParse");var undef;var mesh;var particles;var _color1;var _color2;var TEXTURE_WIDTH;var TEXTURE_HEIGHT;var AMOUNT;exports.init=init;exports.update=update;exports.mesh=mesh=undef;function init(){TEXTURE_WIDTH=settings.TEXTURE_WIDTH;TEXTURE_HEIGHT=settings.TEXTURE_HEIGHT;AMOUNT=TEXTURE_WIDTH*TEXTURE_HEIGHT;_color1=new THREE.Color(settings.color1);_color2=new THREE.Color(settings.color2);var position=new Float32Array(AMOUNT*3);var i3;for(var i=0;i<AMOUNT;i++){i3=i*3;position[i3+0]=i%TEXTURE_WIDTH/TEXTURE_WIDTH;position[i3+1]=~~(i/TEXTURE_WIDTH)/TEXTURE_HEIGHT}var geometry=new THREE.BufferGeometry;geometry.addAttribute("position",new THREE.BufferAttribute(position,3));var renderShader=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.shadowmap,THREE.UniformsLib.lights,THREE.UniformsLib.fog,{textureDefaultPosition:{type:"t",value:fbo.defaultPosition},texturePosition:{type:"t",value:null},dim:{type:"f",value:0},sizeRatio:{type:"f",value:0},lightPos:{type:"v3",value:lights.mesh.position},color1:{type:"c",value:undef},color2:{type:"c",value:undef}}]),defines:{USE_SHADOW:settings.useShadow},vertexShader:shaderParse(glslify(["precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D textureDefaultPosition;\nuniform sampler2D texturePosition;\nuniform float sizeRatio;\nuniform float dim;\n\nvarying float ratio;\nvarying float vAlpha;\nvarying vec3 vNormal;\nvarying vec3 pos;\n\n//chunk(common);\n//chunk(fog_pars_vertex);\n//chunk(shadowmap_pars_vertex);\n\nvoid main() {\n\n    vec3 def = texture2D( textureDefaultPosition, position.xy ).xyz;\n    pos = texture2D( texturePosition, position.xy ).xyz;\n\n    vNormal = pos - def;\n\n    float zRatio = (pos.z + dim/2.0 ) / dim;\n    float xRatio = (pos.x + dim/2.0 ) / dim;\n\n    ratio = zRatio;\n\n    float alpha = 1.0;\n    float margin = 0.02;\n    float minAlpha = 0.0;\n\n    //if ( zRatio < margin ) alpha *= max( minAlpha, smoothstep(0.0,margin,zRatio) );\n    //if ( zRatio > 1.0-margin ) alpha *= max( minAlpha, smoothstep(1.0,1.0-margin,zRatio) );\n    //if ( xRatio < margin ) alpha *= max( minAlpha, smoothstep(0.0,margin,xRatio) );\n    //if ( xRatio > 1.0-margin ) alpha *= max( minAlpha, smoothstep(1.0,1.0-margin,xRatio) );\n\n    vAlpha = alpha;\n\n    vec4 worldPosition = modelMatrix * vec4( pos, 1.0 );\n    vec4 mvPosition = viewMatrix * worldPosition;\n    \n    gl_PointSize = ( 1.27 - 0.2 * clamp( length(mvPosition.xyz) / 400.0 , 0.0, 1.0 ) ) * sizeRatio ;\n    mvPosition.y += gl_PointSize * 0.5;\n\n    gl_Position = projectionMatrix * mvPosition;\n\n    //chunk(shadowmap_vertex);\n    //chunk(fog_vertex);\n}"])),fragmentShader:shaderParse(glslify(["precision mediump float;\n#define GLSLIFY 1\n\nvarying float ratio;\nvarying float vAlpha;\nvarying vec3 vNormal;\nvarying vec3 pos;\n\nuniform vec3 lightPos;\nuniform vec3 color1;\nuniform vec3 color2;\n\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n\n#ifdef USE_SHADOW\n\n\t#include <lights_pars_begin>\n\t#include <shadowmap_pars_fragment>\n\t#include <shadowmask_pars_fragment>\n\n#endif\n\nvoid main() {\n    vec3 outgoingLight = mix(color2, color1, mix(0.0, 1.0, ratio));\n\n    vec3 light = normalize(lightPos-pos);\n    float luminosity = smoothstep(0.4,1.0,(max( 0.0, dot( vNormal, light) ) ) ); \n\n    outgoingLight *= 0.75 + luminosity*0.40;\n\n    luminosity = smoothstep(0.88,1.0,(max( 0.0, dot( vec3(0.0,1.0,0.0), light) ) ) ); \n    outgoingLight *= 0.55 + luminosity*0.55;\n\n\t#ifdef USE_SHADOW\n\t    float shadow = smoothstep(0.0, 0.2, getShadowMask());\n\t\toutgoingLight *= 0.65 + shadow*0.35;\n\t#endif\n    \n    gl_FragColor = vec4( outgoingLight , 1.0 );\n\n    //chunk(fog_fragment);\n\n    gl_FragColor.a = vAlpha;\n    gl_FragColor.a *= 1.0 - smoothstep(0.0, 0.19, clamp( fogFactor, 0.0, 1.0 ) );\n\n}"])),precision:"highp",blending:THREE.NormalBlending,fog:true,lights:true,transparent:true});renderShader.uniforms.color1.value=_color1;renderShader.uniforms.color2.value=_color2;renderShader.uniforms.dim.value=fbo.dim;renderShader.uniforms.sizeRatio.value=settings.sizeRatio;particles=exports.mesh=new THREE.Points(geometry,renderShader);particles.customDistanceMaterial=new THREE.ShaderMaterial({uniforms:{lightPos:{type:"v3",value:lights.mesh.position},texturePosition:{type:"t",value:null}},vertexShader:shaderParse(glslify(["precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D texturePosition;\n\nvarying vec4 vWorldPosition;\n\nvoid main() {\n\n\tvec3 pos = texture2D( texturePosition, position.xy ).xyz;\n\n    vec4 worldPosition = modelMatrix * vec4( pos.xyz, 1.0 );\n    vec4 mvPosition = viewMatrix * worldPosition;\n\n    gl_PointSize = 1.0;\n\n    vWorldPosition = worldPosition;\n\n    gl_Position = projectionMatrix * mvPosition;\n\n}"])),fragmentShader:shaderParse(glslify(["precision highp float;\n#define GLSLIFY 1\n\nuniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n\n//chunk(common);\n\nvec4 pack1K ( float depth ) {\n\n   depth /= 1000.0;\n   const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n   const vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n   vec4 res = fract( depth * bitSh );\n   res -= res.xxyz * bitMsk;\n   return res;\n\n}\n\nvoid main () {\n\n   gl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );\n\n}"])),depthTest:true,depthWrite:true,side:THREE.BackSide,blending:THREE.NoBlending});particles.castShadow=true;particles.receiveShadow=true}function update(){_color1.setStyle(settings.color1);_color2.setStyle(settings.color2);particles.material.uniforms.texturePosition.value=fbo.rtt.texture;particles.customDistanceMaterial.uniforms.texturePosition.value=fbo.rtt.texture;particles.material.uniforms.textureDefaultPosition.value=fbo.defaultPosition.texture}},{"../helpers/shaderParse":3,"./fbo":6,"./lights":8,"./settings":11,glslify:1}],11:[function(require,module,exports){var ind=require("../index");exports.radius=30;exports.viscosity=.12;exports.elasticity=.015;exports.color1="#2095cc";exports.color2="#20cc2e";exports.reset=reset;exports.TEXTURE_WIDTH=256;exports.TEXTURE_HEIGHT=256;exports.quality=1;exports.motionBlur=true;exports.useShadow=false;exports.sizeRatio=1.6;exports.changeQuality=changeQuality;function reset(){exports.radius=30;exports.viscosity=.12;exports.elasticity=.015;exports.color1="#2095cc";exports.color2="#20cc2e";exports.TEXTURE_WIDTH=256;exports.TEXTURE_HEIGHT=256;exports.sizeRatio=1.6;exports.motionBlur=true}function changeQuality(val){if(val){if(exports.quality==val)return;exports.quality=val}if(exports.quality==0){exports.useShadow=false;exports.TEXTURE_WIDTH=256;exports.TEXTURE_HEIGHT=256;exports.sizeRatio=1.65}if(exports.quality==1){exports.useShadow=false;exports.TEXTURE_WIDTH=256;exports.TEXTURE_HEIGHT=512;exports.sizeRatio=1.35}if(exports.quality==2){exports.useShadow=true;exports.TEXTURE_WIDTH=512;exports.TEXTURE_HEIGHT=512;exports.sizeRatio=1.15}if(exports.quality==3){exports.useShadow=true;exports.TEXTURE_WIDTH=512;exports.TEXTURE_HEIGHT=1024;exports.sizeRatio=1}ind.restart()}},{"../index":4}],12:[function(require,module,exports){var LuminosityHighPassShader=require("./support/LuminosityHighPassShader");var CopyShader=require("./support/CopyShader");var BlendShader=require("./support/BlendShader");var EffectComposer=require("./support/EffectComposer");var RenderPass=require("./support/RenderPass");var UnrealBloomPass=require("./support/UnrealBloomPass");var ShaderPass=require("./support/ShaderPass");var SavePass=require("./support/SavePass");var settings=require("../modules/settings");var undef;var SCREEN_WIDTH=undef;var SCREEN_HEIGHT=undef;exports.init=init;exports.setSize=setSize;exports.render=render;savePass=undef;blendPass=undef;composer=undef;function init(renderer,scene,camera,width,height){composer=new THREE.EffectComposer(renderer);composer.setSize(width,height);SCREEN_WIDTH=width;SCREEN_HEIGHT=height;var renderPass=new THREE.RenderPass(scene,camera);var renderTargetParameters={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:false};savePass=new THREE.SavePass(new THREE.WebGLRenderTarget(SCREEN_WIDTH,SCREEN_HEIGHT,renderTargetParameters));blendPass=new THREE.ShaderPass(THREE.BlendShader,"tDiffuse1");blendPass.uniforms["tDiffuse2"].value=savePass.renderTarget.texture;blendPass.uniforms["mixRatio"].value=.25;var bloomPass=new THREE.UnrealBloomPass(new THREE.Vector2(width,height),.2,0,.19);var copyPass=new THREE.ShaderPass(THREE.CopyShader);copyPass.renderToScreen=true;composer.addPass(renderPass);composer.addPass(blendPass);composer.addPass(savePass);composer.addPass(bloomPass);composer.addPass(copyPass)}function render(){if(settings.motionBlur){blendPass.enabled=true;savePass.enabled=true}else{blendPass.enabled=false;savePass.enabled=false}composer.render()}function setSize(width,height){SCREEN_WIDTH=width;SCREEN_HEIGHT=height;composer.setSize(width,height)}},{"../modules/settings":11,"./support/BlendShader":13,"./support/CopyShader":14,"./support/EffectComposer":15,"./support/LuminosityHighPassShader":16,"./support/RenderPass":17,"./support/SavePass":18,"./support/ShaderPass":19,"./support/UnrealBloomPass":20}],13:[function(require,module,exports){THREE.BlendShader={uniforms:{tDiffuse1:{value:null},tDiffuse2:{value:null},mixRatio:{value:.5},opacity:{value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform float mixRatio;","uniform sampler2D tDiffuse1;","uniform sampler2D tDiffuse2;","varying vec2 vUv;","void main() {","vec4 texel1 = texture2D( tDiffuse1, vUv );","vec4 texel2 = texture2D( tDiffuse2, vUv );","gl_FragColor = opacity * mix( texel1, texel2, mixRatio );","}"].join("\n")}},{}],14:[function(require,module,exports){THREE.CopyShader={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","gl_FragColor = opacity * texel;","}"].join("\n")}},{}],15:[function(require,module,exports){THREE.EffectComposer=function(renderer,renderTarget){this.renderer=renderer;if(renderTarget===undefined){var parameters={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat,stencilBuffer:false};var size=renderer.getDrawingBufferSize();renderTarget=new THREE.WebGLRenderTarget(size.width,size.height,parameters);renderTarget.texture.name="EffectComposer.rt1"}this.renderTarget1=renderTarget;this.renderTarget2=renderTarget.clone();this.renderTarget2.texture.name="EffectComposer.rt2";this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.passes=[];if(THREE.CopyShader===undefined){console.error("THREE.EffectComposer relies on THREE.CopyShader")}if(THREE.ShaderPass===undefined){console.error("THREE.EffectComposer relies on THREE.ShaderPass")}this.copyPass=new THREE.ShaderPass(THREE.CopyShader)};Object.assign(THREE.EffectComposer.prototype,{swapBuffers:function(){var tmp=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=tmp},addPass:function(pass){this.passes.push(pass);var size=this.renderer.getDrawingBufferSize();pass.setSize(size.width,size.height)},insertPass:function(pass,index){this.passes.splice(index,0,pass)},render:function(delta){var maskActive=false;var pass,i,il=this.passes.length;for(i=0;i<il;i++){pass=this.passes[i];if(pass.enabled===false)continue;pass.render(this.renderer,this.writeBuffer,this.readBuffer,delta,maskActive);if(pass.needsSwap){if(maskActive){var context=this.renderer.context;context.stencilFunc(context.NOTEQUAL,1,4294967295);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,delta);context.stencilFunc(context.EQUAL,1,4294967295)}this.swapBuffers()}if(THREE.MaskPass!==undefined){if(pass instanceof THREE.MaskPass){maskActive=true}else if(pass instanceof THREE.ClearMaskPass){maskActive=false}}}},reset:function(renderTarget){if(renderTarget===undefined){var size=this.renderer.getDrawingBufferSize();renderTarget=this.renderTarget1.clone();renderTarget.setSize(size.width,size.height)}this.renderTarget1.dispose();this.renderTarget2.dispose();this.renderTarget1=renderTarget;this.renderTarget2=renderTarget.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2},setSize:function(width,height){this.renderTarget1.setSize(width,height);this.renderTarget2.setSize(width,height);for(var i=0;i<this.passes.length;i++){this.passes[i].setSize(width,height)}}});THREE.Pass=function(){this.enabled=true;this.needsSwap=true;this.clear=false;this.renderToScreen=false};Object.assign(THREE.Pass.prototype,{setSize:function(width,height){},render:function(renderer,writeBuffer,readBuffer,delta,maskActive){console.error("THREE.Pass: .render() must be implemented in derived pass.")}})},{}],16:[function(require,module,exports){THREE.LuminosityHighPassShader={shaderID:"luminosityHighPass",uniforms:{tDiffuse:{type:"t",value:null},luminosityThreshold:{type:"f",value:1},smoothWidth:{type:"f",value:1},defaultColor:{type:"c",value:new THREE.Color(0)},defaultOpacity:{type:"f",value:0}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform vec3 defaultColor;","uniform float defaultOpacity;","uniform float luminosityThreshold;","uniform float smoothWidth;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","vec3 luma = vec3( 0.299, 0.587, 0.114 );","float v = dot( texel.xyz, luma );","vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );","float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );","gl_FragColor = mix( outputColor, texel, alpha );","}"].join("\n")}},{}],17:[function(require,module,exports){THREE.RenderPass=function(scene,camera,overrideMaterial,clearColor,clearAlpha){THREE.Pass.call(this);this.scene=scene;this.camera=camera;this.overrideMaterial=overrideMaterial;this.clearColor=clearColor;this.clearAlpha=clearAlpha!==undefined?clearAlpha:0;this.clear=true;this.clearDepth=false;this.needsSwap=false};THREE.RenderPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.RenderPass,render:function(renderer,writeBuffer,readBuffer,delta,maskActive){var oldAutoClear=renderer.autoClear;renderer.autoClear=false;this.scene.overrideMaterial=this.overrideMaterial;var oldClearColor,oldClearAlpha;if(this.clearColor){oldClearColor=renderer.getClearColor().getHex();oldClearAlpha=renderer.getClearAlpha();renderer.setClearColor(this.clearColor,this.clearAlpha)}if(this.clearDepth){renderer.clearDepth()}renderer.render(this.scene,this.camera,this.renderToScreen?null:readBuffer,this.clear);if(this.clearColor){renderer.setClearColor(oldClearColor,oldClearAlpha)}this.scene.overrideMaterial=null;renderer.autoClear=oldAutoClear}})},{}],18:[function(require,module,exports){THREE.SavePass=function(renderTarget){THREE.Pass.call(this);if(THREE.CopyShader===undefined)console.error("THREE.SavePass relies on THREE.CopyShader");var shader=THREE.CopyShader;this.textureID="tDiffuse";this.uniforms=THREE.UniformsUtils.clone(shader.uniforms);this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader});this.renderTarget=renderTarget;if(this.renderTarget===undefined){this.renderTarget=new THREE.WebGLRenderTarget(window.innerWidth,window.innerHeight,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:false});this.renderTarget.texture.name="SavePass.rt"}this.needsSwap=false;this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.quad.frustumCulled=false;this.scene.add(this.quad)};THREE.SavePass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.SavePass,render:function(renderer,writeBuffer,readBuffer){if(this.uniforms[this.textureID]){this.uniforms[this.textureID].value=readBuffer.texture}this.quad.material=this.material;renderer.render(this.scene,this.camera,this.renderTarget,this.clear)}})},{}],19:[function(require,module,exports){THREE.ShaderPass=function(shader,textureID){THREE.Pass.call(this);this.textureID=textureID!==undefined?textureID:"tDiffuse";if(shader instanceof THREE.ShaderMaterial){this.uniforms=shader.uniforms;this.material=shader}else if(shader){this.uniforms=THREE.UniformsUtils.clone(shader.uniforms);this.material=new THREE.ShaderMaterial({defines:Object.assign({},shader.defines),uniforms:this.uniforms,vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader})}this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.quad.frustumCulled=false;this.scene.add(this.quad)};THREE.ShaderPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.ShaderPass,render:function(renderer,writeBuffer,readBuffer,delta,maskActive){if(this.uniforms[this.textureID]){this.uniforms[this.textureID].value=readBuffer.texture}this.quad.material=this.material;if(this.renderToScreen){renderer.render(this.scene,this.camera)}else{renderer.render(this.scene,this.camera,writeBuffer,this.clear)}}})},{}],20:[function(require,module,exports){THREE.UnrealBloomPass=function(resolution,strength,radius,threshold){THREE.Pass.call(this);this.strength=strength!==undefined?strength:1;this.radius=radius;this.threshold=threshold;this.resolution=resolution!==undefined?new THREE.Vector2(resolution.x,resolution.y):new THREE.Vector2(256,256);this.clearColor=new THREE.Color(0,0,0);var pars={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat};this.renderTargetsHorizontal=[];this.renderTargetsVertical=[];this.nMips=5;var resx=Math.round(this.resolution.x/2);var resy=Math.round(this.resolution.y/2);this.renderTargetBright=new THREE.WebGLRenderTarget(resx,resy,pars);this.renderTargetBright.texture.name="UnrealBloomPass.bright";this.renderTargetBright.texture.generateMipmaps=false;for(var i=0;i<this.nMips;i++){var renderTarget=new THREE.WebGLRenderTarget(resx,resy,pars);renderTarget.texture.name="UnrealBloomPass.h"+i;renderTarget.texture.generateMipmaps=false;this.renderTargetsHorizontal.push(renderTarget);var renderTarget=new THREE.WebGLRenderTarget(resx,resy,pars);renderTarget.texture.name="UnrealBloomPass.v"+i;renderTarget.texture.generateMipmaps=false;this.renderTargetsVertical.push(renderTarget);resx=Math.round(resx/2);resy=Math.round(resy/2)}if(THREE.LuminosityHighPassShader===undefined)console.error("THREE.UnrealBloomPass relies on THREE.LuminosityHighPassShader");var highPassShader=THREE.LuminosityHighPassShader;this.highPassUniforms=THREE.UniformsUtils.clone(highPassShader.uniforms);this.highPassUniforms["luminosityThreshold"].value=threshold;this.highPassUniforms["smoothWidth"].value=.01;this.materialHighPassFilter=new THREE.ShaderMaterial({uniforms:this.highPassUniforms,vertexShader:highPassShader.vertexShader,fragmentShader:highPassShader.fragmentShader,defines:{}});this.separableBlurMaterials=[];var kernelSizeArray=[3,5,7,9,11];var resx=Math.round(this.resolution.x/2);var resy=Math.round(this.resolution.y/2);for(var i=0;i<this.nMips;i++){this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));this.separableBlurMaterials[i].uniforms["texSize"].value=new THREE.Vector2(resx,resy);resx=Math.round(resx/2);resy=Math.round(resy/2)}this.compositeMaterial=this.getCompositeMaterial(this.nMips);this.compositeMaterial.uniforms["blurTexture1"].value=this.renderTargetsVertical[0].texture;this.compositeMaterial.uniforms["blurTexture2"].value=this.renderTargetsVertical[1].texture;this.compositeMaterial.uniforms["blurTexture3"].value=this.renderTargetsVertical[2].texture;this.compositeMaterial.uniforms["blurTexture4"].value=this.renderTargetsVertical[3].texture;this.compositeMaterial.uniforms["blurTexture5"].value=this.renderTargetsVertical[4].texture;this.compositeMaterial.uniforms["bloomStrength"].value=strength;this.compositeMaterial.uniforms["bloomRadius"].value=.1;this.compositeMaterial.needsUpdate=true;var bloomFactors=[1,.8,.6,.4,.2];this.compositeMaterial.uniforms["bloomFactors"].value=bloomFactors;this.bloomTintColors=[new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1)];this.compositeMaterial.uniforms["bloomTintColors"].value=this.bloomTintColors;if(THREE.CopyShader===undefined){console.error("THREE.BloomPass relies on THREE.CopyShader")}var copyShader=THREE.CopyShader;this.copyUniforms=THREE.UniformsUtils.clone(copyShader.uniforms);this.copyUniforms["opacity"].value=1;this.materialCopy=new THREE.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:copyShader.vertexShader,fragmentShader:copyShader.fragmentShader,blending:THREE.AdditiveBlending,depthTest:false,depthWrite:false,transparent:true});this.enabled=true;this.needsSwap=false;this.oldClearColor=new THREE.Color;this.oldClearAlpha=1;this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.basic=new THREE.MeshBasicMaterial;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.quad.frustumCulled=false;this.scene.add(this.quad)};THREE.UnrealBloomPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.UnrealBloomPass,dispose:function(){for(var i=0;i<this.renderTargetsHorizontal.length;i++){this.renderTargetsHorizontal[i].dispose()}for(var i=0;i<this.renderTargetsVertical.length;i++){this.renderTargetsVertical[i].dispose()}this.renderTargetBright.dispose()},setSize:function(width,height){var resx=Math.round(width/2);var resy=Math.round(height/2);this.renderTargetBright.setSize(resx,resy);for(var i=0;i<this.nMips;i++){this.renderTargetsHorizontal[i].setSize(resx,resy);this.renderTargetsVertical[i].setSize(resx,resy);this.separableBlurMaterials[i].uniforms["texSize"].value=new THREE.Vector2(resx,resy);resx=Math.round(resx/2);resy=Math.round(resy/2)}},render:function(renderer,writeBuffer,readBuffer,delta,maskActive){this.oldClearColor.copy(renderer.getClearColor());this.oldClearAlpha=renderer.getClearAlpha();var oldAutoClear=renderer.autoClear;renderer.autoClear=false;renderer.setClearColor(this.clearColor,0);if(maskActive)renderer.context.disable(renderer.context.STENCIL_TEST);if(this.renderToScreen){this.quad.material=this.basic;this.basic.map=readBuffer.texture;renderer.render(this.scene,this.camera,undefined,true)}this.highPassUniforms["tDiffuse"].value=readBuffer.texture;this.highPassUniforms["luminosityThreshold"].value=this.threshold;this.quad.material=this.materialHighPassFilter;renderer.render(this.scene,this.camera,this.renderTargetBright,true);var inputRenderTarget=this.renderTargetBright;for(var i=0;i<this.nMips;i++){this.quad.material=this.separableBlurMaterials[i];this.separableBlurMaterials[i].uniforms["colorTexture"].value=inputRenderTarget.texture;this.separableBlurMaterials[i].uniforms["direction"].value=THREE.UnrealBloomPass.BlurDirectionX;renderer.render(this.scene,this.camera,this.renderTargetsHorizontal[i],true);this.separableBlurMaterials[i].uniforms["colorTexture"].value=this.renderTargetsHorizontal[i].texture;this.separableBlurMaterials[i].uniforms["direction"].value=THREE.UnrealBloomPass.BlurDirectionY;renderer.render(this.scene,this.camera,this.renderTargetsVertical[i],true);inputRenderTarget=this.renderTargetsVertical[i]}this.quad.material=this.compositeMaterial;this.compositeMaterial.uniforms["bloomStrength"].value=this.strength;this.compositeMaterial.uniforms["bloomRadius"].value=this.radius;this.compositeMaterial.uniforms["bloomTintColors"].value=this.bloomTintColors;renderer.render(this.scene,this.camera,this.renderTargetsHorizontal[0],true);this.quad.material=this.materialCopy;this.copyUniforms["tDiffuse"].value=this.renderTargetsHorizontal[0].texture;if(maskActive)renderer.context.enable(renderer.context.STENCIL_TEST);if(this.renderToScreen){renderer.render(this.scene,this.camera,undefined,false)}else{renderer.render(this.scene,this.camera,readBuffer,false)}renderer.setClearColor(this.oldClearColor,this.oldClearAlpha);renderer.autoClear=oldAutoClear},getSeperableBlurMaterial:function(kernelRadius){return new THREE.ShaderMaterial({defines:{KERNEL_RADIUS:kernelRadius,SIGMA:kernelRadius},uniforms:{colorTexture:{value:null},texSize:{value:new THREE.Vector2(.5,.5)},direction:{value:new THREE.Vector2(.5,.5)}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"#include <common>\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\t\t\t\tuniform vec2 direction;\t\t\t\t\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\t\t\t\t}\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\t\t\t\t\tfloat fSigma = float(SIGMA);\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\t\t\t\t\t\tfloat x = float(i);\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\t\t\t\t\t\tweightSum += 2.0 * w;\t\t\t\t\t}\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}"})},getCompositeMaterial:function(nMips){return new THREE.ShaderMaterial({defines:{NUM_MIPS:nMips},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},dirtTexture:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\t\t\t\tuniform sampler2D blurTexture1;\t\t\t\tuniform sampler2D blurTexture2;\t\t\t\tuniform sampler2D blurTexture3;\t\t\t\tuniform sampler2D blurTexture4;\t\t\t\tuniform sampler2D blurTexture5;\t\t\t\tuniform sampler2D dirtTexture;\t\t\t\tuniform float bloomStrength;\t\t\t\tuniform float bloomRadius;\t\t\t\tuniform float bloomFactors[NUM_MIPS];\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\t\t\t\t\t\t\t\tfloat lerpBloomFactor(const in float factor) { \t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\t\t\t\t}\t\t\t\t\t\t\t\tvoid main() {\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\t\t\t\t}"})}});THREE.UnrealBloomPass.BlurDirectionX=new THREE.Vector2(1,0);THREE.UnrealBloomPass.BlurDirectionY=new THREE.Vector2(0,1)},{}]},{},[4]);
